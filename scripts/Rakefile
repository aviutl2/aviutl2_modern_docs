task default: %i[clean prepare download update]

task :clean do
  rm_rf "tmp/aviutl2"
  rm_rf "tmp/aviutl2.zip"
  puts "Cleaned up temporary files."
end
task :prepare do
  mkdir_p "tmp"
  File.write("tmp/.gitignore", "*\n")
  puts "Prepared temporary directory."

  sh "bun install"
end

expected_files = %w[aviutl2.txt lua.txt].to_set

USER_AGENT =
  "Ruby/#{RUBY_VERSION} (#{RUBY_PLATFORM}) aviutl2_docs_mirror, https://github.com/sevenc-nanashi/aviutl2_docs_mirror"

task :download do
  require "open-uri"

  url = "https://spring-fragrance.mints.ne.jp/aviutl/"
  puts "Fetching download page from #{url}"
  page_content = URI.open(url, "User-Agent" => USER_AGENT).read
  app_match = page_content.match(%r{<a href="(aviutl2[a-z0-9]+\.zip)">\1</a>}i)
  raise "Could not find download link on the page." unless app_match
  app_zip_name = app_match[1]
  filename = "tmp/aviutl2.zip"
  app_url = "https://spring-fragrance.mints.ne.jp/aviutl/#{app_zip_name}"
  puts "Downloading app from #{app_url}"
  File.open(filename, "wb") do |file|
    URI.open(app_url, "User-Agent" => USER_AGENT) do |content|
      IO.copy_stream(content, file)
    end
  end
  puts "Downloaded app to #{filename}"

  sh "unzip -o #{filename} -d tmp/aviutl2"
  puts "Unzipped app to tmp/aviutl2"

  File.write("./tmp/aviutl2_version.txt", app_zip_name.sub(".zip", ""))

  files = Dir.children("tmp/aviutl2").to_set

  unless files.superset?(expected_files)
    missing = expected_files - files
    raise "Missing expected files: #{missing.to_a.join(", ")}"
  end

  prev_version = app_zip_name.sub(/[0-9]+(?=\.zip)/) { |m| m.to_i - 1 }
  puts "Previous version: #{prev_version}"
  puts "Downloading previous version for comparison..."
  prev_filename = "tmp/aviutl2_prev.zip"
  prev_app_url = "https://spring-fragrance.mints.ne.jp/aviutl/#{prev_version}"
  File.open(prev_filename, "wb") do |file|
    URI.open(prev_app_url, "User-Agent" => USER_AGENT) do |content|
      IO.copy_stream(content, file)
    end
  end
  puts "Downloaded previous version to #{prev_filename}"

  File.write("./tmp/aviutl2_prev_version.txt", prev_version.sub(".zip", ""))

  sh "unzip -o #{prev_filename} -d tmp/aviutl2_prev"
  puts "Unzipped previous version to tmp/aviutl2_prev"
end

task :update do
  latest = File.read("./latest.txt").strip
  current = File.read("./tmp/aviutl2_version.txt").strip

  if latest == current
    puts "No new version detected. Current version: #{current}"
    next
  end

  puts "New version detected! Updating from #{latest} to #{current}"
  sh "#{__dir__}/../node_modules/.bin/gemini -yp 'Follow scripts/prompt.md' -m gemini-2.5-pro", chdir: ".."
end
